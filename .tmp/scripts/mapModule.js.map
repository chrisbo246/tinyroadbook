{"version":3,"sources":["mapModule.js"],"names":["MapModule","map","settings","defaults","ol","basil","narrowWidth","flatHeight","centerOnPosition","debug","$map","storeMapChanges","view","getView","getters","$","each","key","getter","on","e","set","console","log","type","get","restoreMapProperties","ok","value","setters","setter","split","forEach","eventType","getZoom","getSelectedBaseLayer","layers","getLayers","i","l","getVisible","findLayerBy","layer","getArray","result","setCenter","longitude","latitude","proj","transform","setCenterOnPosition","geolocation","Geolocation","projection","getProjection","tracking","once","getPosition","setZoom","zoom","parseInt","fitView","extent","getExtent","fit","getSize","fitLayers","createEmpty","extend","getSource","fitVectorLayer","fitLayerGeometry","id","options","source","feature","getFeatureById","polygon","getGeometry","size","padding","constrainResolution","updateSize","$el","find","toggleClass","height","width","init","window","onresize","Basil","namespace"],"mappings":"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","file":"mapModule.js","sourcesContent":["/*eslint-env browser, jquery */\r\n/*global ol */\r\n/**\r\n* OL3 module.\r\n* @see {@link http://openlayers.org/en/v3.12.1/apidoc/}\r\n* @class\r\n* @external $\r\n* @external Basil\r\n* @external ol\r\n* @param {Object} map - ol initialized map\r\n* @param {Object} settings - Module settings override\r\n* @return {Object} Public functions / variables\r\n*/\r\n/*eslint-disable no-unused-vars*/\r\nvar MapModule = function (map, settings) {\r\n    /*eslint-enable no-unused-vars*/\r\n    'use strict';\r\n\r\n    var defaults = {\r\n        ol: {\r\n        },\r\n        basil: {\r\n        },\r\n        narrowWidth: 300,\r\n        flatHeight: 200,\r\n        centerOnPosition: true,\r\n        debug: true\r\n    };\r\n\r\n    var $map;\r\n    var basil;\r\n\r\n\r\n\r\n    /**\r\n    * Save map state using cookies or local storage\r\n    * @public\r\n    */\r\n    var storeMapChanges = function () {\r\n\r\n        if (!basil) {\r\n            return false;\r\n        }\r\n\r\n        var view = map.getView();\r\n\r\n        var getters = {'center': 'getCenter', 'resolution': 'getResolution', 'rotation': 'getRotation'};\r\n        $.each(getters, function (key, getter) {\r\n            view.on('change:' + key, function (e) {\r\n                basil.set(key, this[getter]());\r\n                console.log(key + ' stored after view ' + e.type, basil.get(key));\r\n            });\r\n        });\r\n\r\n        // Store map move changes\r\n        //map.on('moveend', function (e) {\r\n        //    basil.set('center', this.getView().getCenter());\r\n        //    console.log('Center stored after map ' + e.type, basil.get('center'));\r\n        //});\r\n\r\n        // Store map render changes\r\n        //map.on('postrender', function (e) {\r\n        //    basil.set('zoom', this.getView().getZoom());\r\n        //    console.log('Zoom stored after map ' + e.type, basil.get('zoom'));\r\n        //});\r\n\r\n    };\r\n\r\n\r\n\r\n    /**\r\n    * Save map state using cookies or local storage\r\n    * @public\r\n    * @return {Boolean} Restore success\r\n    */\r\n    var restoreMapProperties = function () {\r\n\r\n        if (!basil) {\r\n            return false;\r\n        }\r\n\r\n        var ok = false;\r\n        var view = map.getView();\r\n        var value;\r\n\r\n        // Restore some view properties\r\n        var setters = {'center': 'setCenter', 'resolution': 'setResolution', 'rotation': 'setRotation'};\r\n        $.each(setters, function (key, setter) {\r\n            value = basil.get(key);\r\n            if (value !== null) {\r\n                if (typeof view[setter] === 'function') {\r\n                    view[setter](value);\r\n                } else {\r\n                    view.set(key, value);\r\n                }\r\n                console.log('View ' + key + ' restored', value);\r\n                ok = true;\r\n            } else {\r\n                console.log('View ' + key + ' was not stored');\r\n            }\r\n        });\r\n\r\n        return ok;\r\n\r\n    };\r\n\r\n\r\n\r\n    /**\r\n    * Display event logs\r\n    * @public\r\n    */\r\n    var debug = function () {\r\n\r\n        var view = map.getView();\r\n\r\n        // pointermove postcompose postrender precompose\r\n        'change change:layerGroup change:size change:target change:view click dblclick moveend pointerdrag propertychange singleclick'.split(' ').forEach(function (eventType) {\r\n            map.on(eventType, function (e) {\r\n                console.log('Map', e.type);\r\n                if (e.key) {\r\n                    console.log('New ' + e.key, map.get(e.key));\r\n                }\r\n            });\r\n        });\r\n\r\n        'change change:center change:resolution change:rotation propertychange'.split(' ').forEach(function (eventType) {\r\n            view.on(eventType, function (e) {\r\n                console.log('View', e.type);\r\n                if (e.key) {\r\n                    console.log('New ' + e.key, view.get(e.key));\r\n                }\r\n            });\r\n        });\r\n        view.on('change:resolution', function () {\r\n            console.log('New zoom', view.getZoom());\r\n        });\r\n\r\n    };\r\n\r\n\r\n\r\n    /**\r\n    * Return the selected base layer name\r\n    * @public\r\n    */\r\n    var getSelectedBaseLayer = function () {\r\n\r\n        var layers = map.getLayers();\r\n\r\n        $.each(layers, function (i, l) {\r\n            //var BL = l.get('baselayer');\r\n            if (l.getVisible()) {\r\n                console.log('Selected layer', l.get('name'));\r\n            } else {\r\n                console.log('Unselected layer', l.get('name'));\r\n            }\r\n            l.on('change:visible', function () {\r\n                // this.getVisible() ? $li.addClass('checked') : $li.removeClass('checked') ;\r\n                if (this.getVisible()) {\r\n                    console.log('Selected layer', this.get('name'));\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n\r\n\r\n    /**\r\n    * Finds recursively the layer with the specified key and value.\r\n    * @param {ol.layer.Base} layer\r\n    * @param {String} key\r\n    * @param {any} value\r\n    * @returns {ol.layer.Base}\r\n    */\r\n    var findLayerBy = function (layer, key, value) {\r\n\r\n        // If it's a single layer and the value was found, return the layer\r\n        if (layer.get(key) === value) {\r\n            return layer;\r\n        }\r\n\r\n        // If it's a group, search recursively\r\n        if (layer.getLayers) {\r\n            var layers = layer.getLayers().getArray();\r\n            var result;\r\n            layers.forEach(function (l) {\r\n                result = findLayerBy(l, key, value);\r\n                if (result) {\r\n                    return result;\r\n                }\r\n            });\r\n        }\r\n\r\n        // Else\r\n        return null;\r\n\r\n    };\r\n\r\n\r\n\r\n    /**\r\n    * Center the map at a given position and make a zoom\r\n    * @public\r\n    * @param {number} longitude - Longitude at EPSG:4326 projection\r\n    * @param {number} latitude - Latitude at EPSG:4326 projection\r\n    */\r\n    var setCenter = function (longitude, latitude) {\r\n\r\n        var view = map.getView();\r\n        view.setCenter(ol.proj.transform([longitude, latitude], 'EPSG:4326', 'EPSG:3857'));\r\n        console.log('Map centered at longitude: ' + longitude + ' latitude: ' + latitude);\r\n\r\n    };\r\n\r\n\r\n\r\n    /**\r\n    * Try to geolocate user and center map on the position\r\n    * @public\r\n    */\r\n    var setCenterOnPosition = function () {\r\n\r\n        var view = map.getView();\r\n        var geolocation = new ol.Geolocation({\r\n            projection: view.getProjection(),\r\n            tracking: true\r\n        });\r\n\r\n        geolocation.once('change:position', function () {\r\n            view.setCenter(geolocation.getPosition());\r\n        });\r\n\r\n    };\r\n\r\n\r\n\r\n    /**\r\n    * Change zoom level\r\n    * @public\r\n    * @param {Integer} zoom - Zoom level from 0 to 21\r\n    */\r\n    var setZoom = function (zoom) {\r\n\r\n        zoom = parseInt(zoom);\r\n        if (zoom) {\r\n            map.getView().setZoom(zoom);\r\n        }\r\n\r\n    };\r\n\r\n\r\n\r\n    /**\r\n    * Zoom out and adjust center to fit the view extent\r\n    * @public\r\n    */\r\n    var fitView = function () {\r\n\r\n        var view = map.getView();\r\n        var extent = view.getExtent();\r\n        view.fit(extent, map.getSize());\r\n\r\n    };\r\n\r\n\r\n\r\n    /**\r\n    * Zoom out and adjust center to fit all layers in the map viewport\r\n    * @public\r\n    */\r\n    var fitLayers = function () {\r\n\r\n        var view = map.getView();\r\n        var extent = ol.extent.createEmpty();\r\n        map.getLayers().forEach(function (layer) {\r\n            ol.extent.extend(extent, layer.getSource().getExtent());\r\n        });\r\n        view.fit(extent, map.getSize());\r\n\r\n    };\r\n\r\n\r\n\r\n    /**\r\n    * Zoom out and adjust center to fit the layer features\r\n    * @public\r\n    * @param {Object} ol3 vector layer\r\n    */\r\n    var fitVectorLayer = function (layer) {\r\n\r\n        var extent = layer.getSource().getExtent();\r\n        map.getView().fit(extent, map.getSize());\r\n\r\n    };\r\n\r\n\r\n\r\n    /**\r\n    * Zoom out and adjust center to fil a vectore layer feature\r\n    * @see {@link http://openlayers.org/en/v3.4.0/examples/center.html}\r\n    * @public\r\n    * @param {String} id - Feature id\r\n    * @param {Object} layer - Vector layer\r\n    * @param {Object} options - ol3 fit function parameters\r\n    */\r\n    var fitLayerGeometry = function (id, layer, options) {\r\n\r\n        var source = layer.getSource();\r\n        var feature = source.getFeatureById(id);\r\n        var polygon = /** @type {ol.geom.SimpleGeometry} */ (feature.getGeometry());\r\n        var size = /** @type {ol.Size} */ (map.getSize());\r\n        var view = map.getView();\r\n\r\n        view.fit(polygon, size, $.extend({\r\n            padding: [0, 0, 0, 0],\r\n            constrainResolution: false\r\n            // nearest: true,\r\n            // minResolution: 50\r\n        }, options));\r\n\r\n    };\r\n\r\n\r\n\r\n    /**\r\n    * Add a .flat and .narrow class to the map container according to map size\r\n    * @param {Number} width - Map width\r\n    * @param {Number} height - Map height\r\n    */\r\n    var updateSize = function () {\r\n\r\n        map.updateSize();\r\n\r\n        //var $map = $('#' + map.get('target'));\r\n\r\n        //$map.toggleClass('narrow', ($map.width() < settings.narrowWidth));\r\n        //$map.toggleClass('flat', ($map.height() < settings.flatHeight));\r\n\r\n        var $el = $map.find('.layer-switcher');\r\n        if ($el) {\r\n            $map.toggleClass('inline-layer-switcher', ($map.height() >= 200 && $map.height() < 500));\r\n            $map.toggleClass('no-layer-switcher', ($map.width() < 300 || $map.height() < 200));\r\n        }\r\n\r\n        $el = $map.find('.ol-zoomslider');\r\n        if ($el) {\r\n            $map.toggleClass('no-zoomslider', ($map.height() < 300));\r\n        }\r\n\r\n    };\r\n\r\n\r\n\r\n    /**\r\n    * Get all tiles in rectangle area\r\n    * @public\r\n    * @param {Array} coord - Longitude, latitude\r\n    * @param {Integer} zoom - Zoom\r\n    * @return {Array}\r\n    */\r\n    /*var getTileURL = function (coord, zoom) {\r\n\r\n    var cor = transform2(coord[0], coord[1]);\r\n    var lon = cor[0];\r\n    var lat = cor[1];\r\n    var out = [];\r\n    var xtile = parseInt(Math.floor((lon + 180) / 360 * (1 << zoom)));\r\n    var ytile = parseInt(Math.floor((1 - Math.log(Math.tan(lat.toRad()) + 1 / Math.cos(lat.toRad())) / Math.PI) / 2 * (1 << zoom)));\r\n    console.log('>> ' + zoom + '/' + xtile + '/' + ytile);\r\n    out[0] = zoom;\r\n    out[1] = xtile;\r\n    out[2] = ytile;\r\n\r\n    return out;\r\n\r\n};*/\r\n\r\n\r\n\r\n/**\r\n* Get all tiles in rectangle area\r\n* @public\r\n* @param {Array} coord1 - Longitude, latitude\r\n* @param {Array} coord2 - Longitude, latitude\r\n*/\r\n/*var getAllTiles = function (coord1, coord2) {\r\n\r\nvar out1 = getTileURL(coord1, 10);\r\nvar out2 = getTileURL(coord2, 10);\r\nvar outTmp1;\r\n\r\nif(out1[1] > out2[1]) {\r\noutTmp1 = out1[1];\r\nout1[1] = out2[1];\r\nout2[1] = outTmp1;\r\n}\r\nif(out1[2] > out2[2]) {\r\noutTmp1 = out1[2];\r\nout1[2] = out2[2];\r\nout2[2] = outTmp1;\r\n}\r\n\r\nconsole.log('zoom' + out1[0] + ' from ' + out1[1] + ' to ' + out2[1] + ' from ' + out1[2] + ' to ' + out2[2]);\r\nwhile(out1[1] <= out2[1]) {\r\nwhile(out1[2] <= out2[2]) {\r\nconsole.log('*** ' + out1[1] + '/' + out1[2]);\r\nout1[2]++;\r\n}\r\nout1[1]++;\r\n}\r\n\r\n};*/\r\n\r\n\r\n\r\n/**\r\n* Execute common tasks after map initialisation\r\n* @private\r\n*/\r\nvar init = function () {\r\n\r\n    // Merge default and custom settings\r\n    settings = $.extend(true, {}, defaults, settings);\r\n\r\n    // Define map container\r\n    $map = $('#' + map.get('target'));\r\n\r\n    // Redraw the map when the screen size change\r\n    window.onresize = function () {\r\n        updateSize();\r\n    };\r\n\r\n    // Add a .flat and .narrow class to the map container according to map size\r\n    updateSize();\r\n\r\n    // Init Basil\r\n    if (typeof window.Basil !== 'undefined') {\r\n        // Define an unique namespace to store map data\r\n        if (!settings.basil.namespace) {\r\n            settings.basil.namespace = map.get('target');\r\n        }\r\n        basil = new window.Basil(settings.basil);\r\n\r\n        // Try to restore map center and zoom from the local storage\r\n        if (!restoreMapProperties()) {\r\n            // Or center map on user position and set a default zoom\r\n            if (settings.centerOnPosition) {\r\n                setCenterOnPosition();\r\n                map.getView().setZoom(12);\r\n            }\r\n        }\r\n\r\n        // Check map events and store changes to local storage\r\n        storeMapChanges();\r\n\r\n    }\r\n\r\n    if (settings.debug) {\r\n        debug();\r\n    }\r\n\r\n};\r\n\r\n\r\n\r\ninit();\r\n\r\n\r\n\r\nreturn {\r\n    findLayerBy: findLayerBy,\r\n    fitLayerGeometry: fitLayerGeometry,\r\n    fitLayers: fitLayers,\r\n    fitVectorLayer: fitVectorLayer,\r\n    fitView: fitView,\r\n    getSelectedBaseLayer: getSelectedBaseLayer,\r\n    map: map,\r\n    restoreMapProperties: restoreMapProperties,\r\n    setCenter: setCenter,\r\n    setCenterOnPosition: setCenterOnPosition,\r\n    settings: settings,\r\n    setZoom: setZoom,\r\n    storeMapChanges: storeMapChanges,\r\n    updateSize: updateSize\r\n};\r\n\r\n};\r\n"]}